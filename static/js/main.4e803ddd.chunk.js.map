{"version":3,"sources":["Direction.ts","Point.ts","Board.ts","Canvas.ts","Snake.ts","Food.ts","Game.ts","App.tsx","serviceWorker.js","index.js"],"names":["Direction","Point","x","y","Object","classCallCheck","this","createClass","key","value","p1","p2","Board","columns","rows","_columns","_rows","Math","round","get","set","WIDTH","window","innerWidth","HEIGHT","innerHeight","BOARD_COLOR","Canvas","canvas","context","document","getElementById","width","height","getContext","console","log","fillBoard","color","fillStyle","fillRect","point","snake","food","drawSnake","drawFood","drawRect","scope","_","body","Snake","board","head","tail","direction","eatedFood","JSON","stringify","initSnake","addPart","point2","point3","part","push","functionName","toString","newHead","validateBoard","unshift","pop","updateParts","Food","generateFood","getRandomInt","min","max","ceil","floor","random","Game","SPEED_GAME","getCountColumns","getCountRows","getCenterPoint","gameLoop","_this","addEventListener","e","onKeyDown","setInterval","drawScene","moveSnake","equal","cloneDeep","undefined","event","changeDirection","Right","Left","Up","Down","App","react_default","a","createElement","className","id","init","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","URL","process","href","origin","concat","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4e803ddd.chunk.js","sourcesContent":["export enum Direction {\r\n    Up = \"Up\",\r\n    Down = \"Down\",\r\n    Left = \"Left\",\r\n    Right = \"Right\"\r\n}","export class Point {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    };\r\n\r\n    static equal(p1: Point | undefined, p2: Point | undefined) {\r\n        return p1 && p2 && p1.x === p2.x && p2.y === p1.y;\r\n    }\r\n}","import {Point} from \"./Point\";\r\n\r\nexport class Board {\r\n    private _columns: number;\r\n    private _rows: number;\r\n\r\n    constructor(columns: number, rows: number) {\r\n        this._columns = columns;\r\n        this._rows = rows;\r\n    }\r\n\r\n    get columns() {\r\n        return this._columns;\r\n    }\r\n\r\n    set columns(value) {\r\n        this._columns = value;\r\n    }\r\n\r\n    get rows() {\r\n        return this._rows;\r\n    }\r\n\r\n    set rows(value) {\r\n        this._rows = value;\r\n    }\r\n\r\n    getCenterPoint(): Point {\r\n        return new Point(Math.round(this._columns / 2), Math.round(this._rows / 2));\r\n    }\r\n\r\n}","import {Snake} from \"./Snake\";\r\nimport * as _ from \"lodash\";\r\nimport {Point} from \"./Point\";\r\nimport {Food} from \"./Food\";\r\n\r\nconst ZOOM: number = 0.75;\r\nconst RECT_SIZE = 10;\r\nconst WIDTH: number = Math.round(window.innerWidth * ZOOM / RECT_SIZE) * RECT_SIZE;\r\nconst HEIGHT: number = Math.round(window.innerHeight * ZOOM / RECT_SIZE) * RECT_SIZE;\r\nconst SNAKE_COLOR: string = \"blue\";\r\nconst BOARD_COLOR: string = \"white\";\r\nconst FOOD_COLOR = \"green\";\r\n\r\nexport class Canvas {\r\n    private canvas: any;\r\n    private context: CanvasRenderingContext2D;\r\n\r\n\r\n    constructor() {\r\n        this.canvas = document.getElementById('board');\r\n        this.canvas.width = WIDTH;\r\n        this.canvas.height = HEIGHT;\r\n        this.context = this.canvas.getContext(\"2d\");\r\n        console.log(\"BOARD is initialized with \" + WIDTH + \" x \" + HEIGHT);\r\n        this.fillBoard(BOARD_COLOR);\r\n    }\r\n\r\n\r\n    getCountRows() {\r\n        return HEIGHT / 10;\r\n    }\r\n\r\n    getCountColumns() {\r\n        return WIDTH / 10;\r\n    }\r\n\r\n    fillBoard(color: string) {\r\n        this.context.fillStyle = color;\r\n        this.context.fillRect(0, 0, WIDTH, HEIGHT);\r\n    }\r\n\r\n    drawRect(point: Point, color: string) {\r\n        this.context.fillStyle = color;\r\n        this.context.fillRect(point.x * RECT_SIZE, point.y * RECT_SIZE, RECT_SIZE, RECT_SIZE);\r\n    }\r\n\r\n    drawScene(snake: Snake, food: Food) {\r\n        this.fillBoard(BOARD_COLOR);\r\n        this.drawSnake(snake);\r\n        this.drawFood(food);\r\n    }\r\n\r\n    drawFood(food: Food) {\r\n        this.drawRect(food.point, FOOD_COLOR);\r\n    }\r\n\r\n    drawSnake(snake: Snake) {\r\n        let scope = this;\r\n        _.forEach(snake.body, function (point: Point) {\r\n            scope.drawRect(point, SNAKE_COLOR);\r\n        })\r\n    }\r\n\r\n\r\n}","import {Point} from \"./Point\";\r\nimport {Direction} from \"./Direction\";\r\nimport * as _ from 'lodash';\r\nimport {Board} from \"./Board\";\r\nimport {Food} from \"./Food\";\r\n\r\nexport class Snake {\r\n    body: Array<Point> = [];\r\n    head: Point | undefined;\r\n    tail: Point | undefined;\r\n    direction: Direction | null;\r\n    board: Board;\r\n    eatedFood: Food | undefined;\r\n\r\n\r\n    constructor(point: Point, board: Board) {\r\n        this.board = board;\r\n        console.log(\"Snake start on Point: \" + JSON.stringify(point));\r\n        this.initSnake(point);\r\n    }\r\n\r\n    initSnake(point: Point) {\r\n        this.addPart(point);\r\n        //TEST\r\n        let point2 = _.cloneDeep(point);\r\n        point2.x += 1;\r\n        this.addPart(point2)\r\n        let point3 = _.cloneDeep(point);\r\n        point3.x += 1;\r\n        this.addPart(point3)\r\n    }\r\n\r\n    addPart(part: Point) {\r\n        this.body.push(part);\r\n    }\r\n\r\n    public changeDirection(direction: Direction) {\r\n        this.direction = direction;\r\n    }\r\n\r\n    moveSnake() {\r\n        let scope = this;\r\n        if (this.direction) {\r\n            let functionName: string = 'move' + this.direction.toString();\r\n            let head = _.cloneDeep(_.first(scope.body));\r\n            let newHead = (this as any)[functionName](head);\r\n            this.validateBoard(newHead);\r\n            this.body.unshift(newHead);\r\n            this.body.pop();\r\n            this.updateParts();\r\n        }\r\n    }\r\n\r\n    updateParts() {\r\n        this.head = _.first(this.body);\r\n        this.tail = _.last(this.body);\r\n    }\r\n\r\n    validateBoard(point: Point) {\r\n        if (point.x >= this.board.columns)\r\n            point.x = 0;\r\n        if (point.y >= this.board.rows)\r\n            point.y = 0;\r\n        if (point.y < 0)\r\n            point.y = this.board.rows - 1;\r\n        if (point.x < 0)\r\n            point.x = this.board.columns - 1;\r\n        return point;\r\n    }\r\n\r\n    eat() {\r\n\r\n    }\r\n\r\n    moveRight(head: Point) {\r\n       // console.log(\"move right\");\r\n        head.x += 1;\r\n        return head;\r\n    }\r\n\r\n    moveLeft(head: Point) {\r\n      //  console.log(\"move left\");\r\n        head.x -= 1;\r\n        return head;\r\n    }\r\n\r\n    moveUp(head: Point) {\r\n     //   console.log(\"move up\");\r\n        head.y -= 1;\r\n        return head;\r\n    }\r\n\r\n    moveDown(head: Point) {\r\n      //  console.log(\"move down\")\r\n        head.y += 1;\r\n        return head;\r\n    }\r\n\r\n}","import {Point} from \"./Point\";\r\n\r\nexport class Food {\r\n    point: Point;\r\n    columns: number;\r\n    rows: number;\r\n\r\n    constructor(columns: number, rows: number) {\r\n        this.columns = columns;\r\n        this.rows = rows;\r\n        this.generateFood();\r\n    }\r\n\r\n    generateFood() {\r\n        this.point = new Point(this.getRandomInt(0, this.columns), this.getRandomInt(0, this.rows));\r\n    }\r\n\r\n    getRandomInt(min: number, max: number) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n}","import {Board} from \"./Board\";\r\nimport {Canvas} from \"./Canvas\";\r\nimport {Snake} from \"./Snake\";\r\nimport {Direction} from \"./Direction\";\r\nimport {Point} from \"./Point\";\r\nimport {Food} from \"./Food\";\r\nimport _ from 'lodash';\r\n\r\nexport class Game {\r\n    private board: Board;\r\n    private canvas: Canvas;\r\n    private snake: Snake;\r\n    private SPEED_GAME: number;\r\n    private food: Food;\r\n\r\n    constructor() {\r\n        this.SPEED_GAME = 100;\r\n        this.canvas = new Canvas();\r\n        this.board = new Board(this.canvas.getCountColumns(), this.canvas.getCountRows());\r\n        console.log(\"Board initialized with \" + this.board.columns + \" Columns and \" + this.board.rows + \" Rows\");\r\n        this.snake = new Snake(this.board.getCenterPoint(), this.board);\r\n        this.food = new Food(this.canvas.getCountColumns(), this.canvas.getCountRows());\r\n        console.log(this.food);\r\n        this.gameLoop();\r\n    }\r\n\r\n    gameLoop() {\r\n        console.log(this);\r\n        let scope = this;\r\n        document.addEventListener('keydown', function (e) {\r\n                scope.onKeyDown(e);\r\n            }\r\n        );\r\n        setInterval(() => {\r\n            this.canvas.drawScene(this.snake, this.food);\r\n            if (this.snake.direction) {\r\n                this.snake.moveSnake();\r\n            }\r\n            if (Point.equal(this.snake.head, this.food.point)) {\r\n                this.snake.eatedFood = _.cloneDeep(this.food);\r\n                this.food.generateFood();\r\n            }\r\n            if (this.snake.eatedFood) {\r\n                console.log(this.snake.eatedFood.point);\r\n                if (Point.equal(this.snake.eatedFood.point, this.snake.tail)) {\r\n                    console.log(\"TAIL\");\r\n                    this.snake.addPart(this.snake.eatedFood.point);\r\n                    this.snake.eatedFood = undefined;\r\n                }\r\n            }\r\n\r\n            console.log(this.snake.tail);\r\n\r\n\r\n        }, this.SPEED_GAME);\r\n    }\r\n\r\n\r\n    onKeyDown(event: any) {\r\n        console.log(this);\r\n        switch (event.key) {\r\n            case 'ArrowRight':\r\n                this.snake.changeDirection(Direction.Right);\r\n                console.log(\"PRAWO\");\r\n                break;\r\n            case 'ArrowLeft':\r\n                this.snake.changeDirection(Direction.Left);\r\n                console.log(\"LEWO\");\r\n                break;\r\n            case 'ArrowUp':\r\n                this.snake.changeDirection(Direction.Up);\r\n                console.log(\"GÓRA\");\r\n                break;\r\n            case 'ArrowDown':\r\n                this.snake.changeDirection(Direction.Down);\r\n                console.log(\"DÓŁ\");\r\n                break;\r\n            default:\r\n                console.log(\"COŚ\");\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n}","import React, {Component} from 'react';\nimport {Game} from \"./Game\";\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <canvas id=\"board\" className=\"canvas\"></canvas>\n                </header>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        this.init()\n    }\n\n    init() {\n        new Game();\n    }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}